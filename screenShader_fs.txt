#version 330 core
in vec2 TexCoords;

out vec4 color;

uniform vec2 circleCenter;
uniform float radius;
uniform float sigma;
uniform sampler2D screenTexture;
const float offset = 1.0 / 300;  

void main()
{
	// sampling texture around current texture
    vec2 offsets[9] = vec2[](
        vec2(-offset, offset),  // top-left
        vec2(0.0f,    offset),  // top-center
        vec2(offset,  offset),  // top-right
        vec2(-offset, 0.0f),    // center-left
        vec2(0.0f,    0.0f),    // center-center
        vec2(offset,  0.0f),    // center-right
        vec2(-offset, -offset), // bottom-left
        vec2(0.0f,    -offset), // bottom-center
        vec2(offset,  -offset)  // bottom-right    
    );
	
	// Gaussian blur =  first * pow(2.718, -( (x^2 + y^2) / (2*Sigma) ))
	float Sigma = pow(sigma, 2);
	float first = 1 / (2*3.1415*Sigma);
	float kernel[9] = float[](
		first * exp( -( 1 / Sigma )), first * exp( -( 1 / (2*Sigma) )), first * exp( -( 1 / (Sigma) )),
        first * exp( -( 1 / (2*Sigma) )),  first   , first * exp( -( 1 / (2*Sigma) )),
        first * exp( -( 1 / Sigma )), first * exp( -( 1 / (2*Sigma) )), first * exp( -( 1 / Sigma )) 
	);
	float sum=0;
	for(int i=0; i<9;++i){
		sum += kernel[i];
	}
	for(int i=0; i<9; i++){
		kernel[i] = kernel[i]/sum;
	}
	float distance = sqrt(pow(TexCoords.s-circleCenter.x,2)+pow(TexCoords.t-circleCenter.y,2));
    if(distance < radius){
//------------------------------------magnify------------------------------------------//		
		float ratio = 1.0f/1.52f;
		vec3 I = vec3 (circleCenter, 1.0) - vec3(TexCoords.st,0.0);
		vec3 Refract = -refract(normalize(I), vec3(0,0,1), ratio);
		vec2 refractTexCoords = vec2(Refract)+circleCenter;
//-------------------------------------blur--------------------------------------------//
		vec3 sampleTex[9];
		for(int i = 0; i < 9; i++)
		{	
		    sampleTex[i] = vec3(texture(screenTexture, refractTexCoords.xy + offsets[i]));
		}
		vec3 col = vec3(0.0);
		for(int i = 0; i < 9; i++)
		    col += sampleTex[i] * kernel[i];
    
		 color = vec4(col, 1.0);
	}else
		color = texture(screenTexture, TexCoords);
}  